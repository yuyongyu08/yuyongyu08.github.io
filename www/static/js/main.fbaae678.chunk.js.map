{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","count","localStorage","getItem","state","currentKind","kinds","title","code","loadFailed","this","setState","next","num","Number","setItem","handleClick","e","target","value","kindList1","slice","map","kind","type","name","checked","onChange","handleChange","kindList2","className","width","autoPlay","controls","src","onError","handleError","onClick","step","defaultValue","handleInput","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2QAGqBA,G,kBACnB,WAAYC,GAAQ,IAAD,sBACjB,4CAAMA,IAEN,IACIC,EAAQC,aAAaC,QAAb,UADD,IACC,YADD,IAHM,OAMjB,EAAKC,MAAQ,CACXH,MAAOA,EACPI,YALS,IAMTC,MAAO,CACL,CACEC,MAAO,eACPC,KAAM,KAER,CACED,MAAO,eACPC,KAAM,KAER,CACED,MAAO,eACPC,KAAM,KAER,CACED,MAAO,eACPC,KAAM,KAER,CACED,MAAO,eACPC,KAAM,KAER,CACED,MAAO,eACPC,KAAM,KAER,CACED,MAAO,eACPC,KAAM,KAER,CACED,MAAO,eACPC,KAAM,KAER,CACED,MAAO,eACPC,KAAM,MAGVC,YAAY,GA/CG,E,0EAmDND,GACXE,KAAKC,SAAS,CACZN,YAAaG,EACbP,MAAOC,aAAaC,QAAb,UAAwBK,EAAxB,YAAyCA,M,kCAIxCI,EAAMC,GAChB,IAAIZ,EAAQY,IAAaD,EAAOE,OAAOJ,KAAKN,MAAMH,OAAS,EAAIa,OAAOJ,KAAKN,MAAMH,OAAS,GAEvFW,GAAQE,OAAOJ,KAAKN,MAAMC,aAAe,MAI5CK,KAAKC,SAAS,CACZV,QACAQ,YAAY,IAEdP,aAAaa,QAAb,UAAwBL,KAAKN,MAAMC,YAAnC,UAAwDJ,M,oCAIxDS,KAAKM,aAAY,K,kCAGPC,GACVP,KAAKM,aAAY,EAAMF,OAAOJ,KAAKN,MAAMC,aAAeS,OAAOG,EAAEC,OAAOC,U,+BAGhE,IAAD,OACHC,EAAYV,KAAKN,MAAME,MAAMe,MAAM,EAAG,GAAGC,KAAI,SAAAC,GAC/C,OAAO,4BAAI,+BAAO,2BAAOC,KAAK,QAAQC,KAAK,OAAOC,QAAS,EAAKtB,MAAMC,aAAekB,EAAKf,KAAMW,MAAOI,EAAKf,KAAMmB,SAAU,WAAQ,EAAKC,aAAaL,EAAKf,SAAYe,EAAKhB,WAG1KsB,EAAYnB,KAAKN,MAAME,MAAMe,MAAM,GAAGC,KAAI,SAAAC,GAC5C,OAAO,4BAAI,+BAAO,2BAAOC,KAAK,QAAQC,KAAK,OAAOC,QAAS,EAAKtB,MAAMC,aAAekB,EAAKf,KAAMW,MAAOI,EAAKf,KAAMmB,SAAU,WAAQ,EAAKC,aAAaL,EAAKf,SAAYe,EAAKhB,WAG9K,OACE,yBAAKuB,UAAU,OACb,yBAAKA,UAAU,cACb,wBAAIA,UAAU,SACXV,GAEH,wBAAIU,UAAU,SACXD,GAEH,yBAAKC,UAAU,SACb,2BACEC,MAAM,OACNC,UAAQ,EACRC,UAAQ,EAACR,KAAK,QACdS,IAAG,2CAAsCxB,KAAKN,MAAMC,YAAjD,YAAgEK,KAAKN,MAAMH,MAA3E,YAAoFS,KAAKN,MAAMH,MAA/F,YACHkC,QAAS,WAAQ,EAAKC,iBAGxB,yBAAKN,UAAU,WACb,4BAAQO,QAAS,kBAAM,EAAKrB,aAAY,KAAxC,sBACA,4BAAQqB,QAAS,kBAAM,EAAKrB,aAAY,KAAxC,uBAEF,sCACG,2BAAOQ,KAAK,SAASc,KAAK,IAAIC,aAAczB,OAAOJ,KAAKN,MAAMH,OAASa,OAAOJ,KAAKN,MAAMC,aAAcsB,SAAU,SAACV,GAAO,EAAKuB,YAAYvB,MAD7I,iB,GAhHqBwB,IAAMC,YCSnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fbaae678.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    let code = 1000\n    let count = localStorage.getItem(`${code}_count`) || code\n\n    this.state = {\n      count: count,\n      currentKind: code,\n      kinds: [\n        {\n          title: '华语',\n          code: 1000\n        },\n        {\n          title: '自拍',\n          code: 2000\n        },\n        {\n          title: '偷怕',\n          code: 3000\n        },\n        {\n          title: '动漫',\n          code: 4000\n        },\n        {\n          title: '合集',\n          code: 5000\n        },\n        {\n          title: '主播',\n          code: 6000\n        },\n        {\n          title: '动漫',\n          code: 7000\n        },\n        {\n          title: '日本',\n          code: 8000\n        },\n        {\n          title: '欧美',\n          code: 9000\n        },\n      ],\n      loadFailed: false\n    }\n  }\n\n  handleChange(code) {\n    this.setState({\n      currentKind: code,\n      count: localStorage.getItem(`${code}_count`) || code\n    })\n  }\n\n  handleClick(next, num) {\n    let count = num ? num : (next ? Number(this.state.count) + 1 : Number(this.state.count) - 1) \n\n    if(next >= Number(this.state.currentKind) + 1000){\n      return\n    }\n\n    this.setState({\n      count,\n      loadFailed: false\n    })\n    localStorage.setItem(`${this.state.currentKind}_count`, count)\n  }\n\n  handleError() {\n    this.handleClick(true)\n  }\n\n  handleInput(e){\n    this.handleClick(true, Number(this.state.currentKind) + Number(e.target.value))\n  }\n\n  render() {\n    let kindList1 = this.state.kinds.slice(0, 4).map(kind => {\n      return <li><label><input type=\"radio\" name=\"kind\" checked={this.state.currentKind == kind.code} value={kind.code} onChange={() => { this.handleChange(kind.code) }} />{kind.title}</label></li>\n    })\n\n    let kindList2 = this.state.kinds.slice(4).map(kind => {\n      return <li><label><input type=\"radio\" name=\"kind\" checked={this.state.currentKind == kind.code} value={kind.code} onChange={() => { this.handleChange(kind.code) }} />{kind.title}</label></li>\n    })\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <ul className=\"kinds\">\n            {kindList1}\n          </ul>\n          <ul className=\"kinds\">\n            {kindList2}\n          </ul>\n          <div className=\"video\">\n            <video \n              width=\"100%\" \n              autoPlay\n              controls name=\"media\" \n              src={`https://v8.xiaoxiaodl.com/videos/${this.state.currentKind}/${this.state.count}/${this.state.count}_suo.mp4`} \n              onError={() => { this.handleError() }}\n            ></video>\n\n            <div className=\"actions\">\n              <button onClick={() => this.handleClick(false)}>上一个</button>\n              <button onClick={() => this.handleClick(true)}>下一个</button>\n            </div>\n            <div>\n              第<input type=\"number\" step=\"5\" defaultValue={Number(this.state.count) - Number(this.state.currentKind)} onChange={(e) => {this.handleInput(e)}}/>个\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}